// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "homework/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockValidationService is an autogenerated mock type for the ValidationService type
type MockValidationService struct {
	mock.Mock
}

type MockValidationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidationService) EXPECT() *MockValidationService_Expecter {
	return &MockValidationService_Expecter{mock: &_m.Mock}
}

// ValidateAccept provides a mock function with given fields: dto
func (_m *MockValidationService) ValidateAccept(dto models.Dto) (models.Order, error) {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccept")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Dto) (models.Order, error)); ok {
		return rf(dto)
	}
	if rf, ok := ret.Get(0).(func(models.Dto) models.Order); ok {
		r0 = rf(dto)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(models.Dto) error); ok {
		r1 = rf(dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidationService_ValidateAccept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccept'
type MockValidationService_ValidateAccept_Call struct {
	*mock.Call
}

// ValidateAccept is a helper method to define mock.On call
//   - dto models.Dto
func (_e *MockValidationService_Expecter) ValidateAccept(dto interface{}) *MockValidationService_ValidateAccept_Call {
	return &MockValidationService_ValidateAccept_Call{Call: _e.mock.On("ValidateAccept", dto)}
}

func (_c *MockValidationService_ValidateAccept_Call) Run(run func(dto models.Dto)) *MockValidationService_ValidateAccept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Dto))
	})
	return _c
}

func (_c *MockValidationService_ValidateAccept_Call) Return(_a0 models.Order, _a1 error) *MockValidationService_ValidateAccept_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidationService_ValidateAccept_Call) RunAndReturn(run func(models.Dto) (models.Order, error)) *MockValidationService_ValidateAccept_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAcceptReturn provides a mock function with given fields: id, userId
func (_m *MockValidationService) ValidateAcceptReturn(id string, userId string) (models.Order, error) {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAcceptReturn")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.Order, error)); ok {
		return rf(id, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.Order); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidationService_ValidateAcceptReturn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAcceptReturn'
type MockValidationService_ValidateAcceptReturn_Call struct {
	*mock.Call
}

// ValidateAcceptReturn is a helper method to define mock.On call
//   - id string
//   - userId string
func (_e *MockValidationService_Expecter) ValidateAcceptReturn(id interface{}, userId interface{}) *MockValidationService_ValidateAcceptReturn_Call {
	return &MockValidationService_ValidateAcceptReturn_Call{Call: _e.mock.On("ValidateAcceptReturn", id, userId)}
}

func (_c *MockValidationService_ValidateAcceptReturn_Call) Run(run func(id string, userId string)) *MockValidationService_ValidateAcceptReturn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockValidationService_ValidateAcceptReturn_Call) Return(_a0 models.Order, _a1 error) *MockValidationService_ValidateAcceptReturn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidationService_ValidateAcceptReturn_Call) RunAndReturn(run func(string, string) (models.Order, error)) *MockValidationService_ValidateAcceptReturn_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateIssue provides a mock function with given fields: ids
func (_m *MockValidationService) ValidateIssue(ids []string) ([]models.Order, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for ValidateIssue")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.Order, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.Order); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidationService_ValidateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateIssue'
type MockValidationService_ValidateIssue_Call struct {
	*mock.Call
}

// ValidateIssue is a helper method to define mock.On call
//   - ids []string
func (_e *MockValidationService_Expecter) ValidateIssue(ids interface{}) *MockValidationService_ValidateIssue_Call {
	return &MockValidationService_ValidateIssue_Call{Call: _e.mock.On("ValidateIssue", ids)}
}

func (_c *MockValidationService_ValidateIssue_Call) Run(run func(ids []string)) *MockValidationService_ValidateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockValidationService_ValidateIssue_Call) Return(_a0 []models.Order, _a1 error) *MockValidationService_ValidateIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidationService_ValidateIssue_Call) RunAndReturn(run func([]string) ([]models.Order, error)) *MockValidationService_ValidateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateList provides a mock function with given fields: offset, limit
func (_m *MockValidationService) ValidateList(offset string, limit string) (int, int, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ValidateList")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (int, int, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(offset, limit)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) int); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockValidationService_ValidateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateList'
type MockValidationService_ValidateList_Call struct {
	*mock.Call
}

// ValidateList is a helper method to define mock.On call
//   - offset string
//   - limit string
func (_e *MockValidationService_Expecter) ValidateList(offset interface{}, limit interface{}) *MockValidationService_ValidateList_Call {
	return &MockValidationService_ValidateList_Call{Call: _e.mock.On("ValidateList", offset, limit)}
}

func (_c *MockValidationService_ValidateList_Call) Run(run func(offset string, limit string)) *MockValidationService_ValidateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockValidationService_ValidateList_Call) Return(_a0 int, _a1 int, _a2 error) *MockValidationService_ValidateList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockValidationService_ValidateList_Call) RunAndReturn(run func(string, string) (int, int, error)) *MockValidationService_ValidateList_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateReturnToCourier provides a mock function with given fields: id
func (_m *MockValidationService) ValidateReturnToCourier(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ValidateReturnToCourier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidationService_ValidateReturnToCourier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateReturnToCourier'
type MockValidationService_ValidateReturnToCourier_Call struct {
	*mock.Call
}

// ValidateReturnToCourier is a helper method to define mock.On call
//   - id string
func (_e *MockValidationService_Expecter) ValidateReturnToCourier(id interface{}) *MockValidationService_ValidateReturnToCourier_Call {
	return &MockValidationService_ValidateReturnToCourier_Call{Call: _e.mock.On("ValidateReturnToCourier", id)}
}

func (_c *MockValidationService_ValidateReturnToCourier_Call) Run(run func(id string)) *MockValidationService_ValidateReturnToCourier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockValidationService_ValidateReturnToCourier_Call) Return(_a0 error) *MockValidationService_ValidateReturnToCourier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidationService_ValidateReturnToCourier_Call) RunAndReturn(run func(string) error) *MockValidationService_ValidateReturnToCourier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValidationService creates a new instance of MockValidationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidationService {
	mock := &MockValidationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
