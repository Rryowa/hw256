// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "homework/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// Accept provides a mock function with given fields: ctx, dto, pkgTypeStr
func (_m *MockOrderService) Accept(ctx context.Context, dto models.Dto, pkgTypeStr string) error {
	ret := _m.Called(ctx, dto, pkgTypeStr)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dto, string) error); ok {
		r0 = rf(ctx, dto, pkgTypeStr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderService_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type MockOrderService_Accept_Call struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//   - ctx context.Context
//   - dto models.Dto
//   - pkgTypeStr string
func (_e *MockOrderService_Expecter) Accept(ctx interface{}, dto interface{}, pkgTypeStr interface{}) *MockOrderService_Accept_Call {
	return &MockOrderService_Accept_Call{Call: _e.mock.On("Accept", ctx, dto, pkgTypeStr)}
}

func (_c *MockOrderService_Accept_Call) Run(run func(ctx context.Context, dto models.Dto, pkgTypeStr string)) *MockOrderService_Accept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dto), args[2].(string))
	})
	return _c
}

func (_c *MockOrderService_Accept_Call) Return(_a0 error) *MockOrderService_Accept_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderService_Accept_Call) RunAndReturn(run func(context.Context, models.Dto, string) error) *MockOrderService_Accept_Call {
	_c.Call.Return(run)
	return _c
}

// Issue provides a mock function with given fields: ctx, idsStr
func (_m *MockOrderService) Issue(ctx context.Context, idsStr string) error {
	ret := _m.Called(ctx, idsStr)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, idsStr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderService_Issue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issue'
type MockOrderService_Issue_Call struct {
	*mock.Call
}

// Issue is a helper method to define mock.On call
//   - ctx context.Context
//   - idsStr string
func (_e *MockOrderService_Expecter) Issue(ctx interface{}, idsStr interface{}) *MockOrderService_Issue_Call {
	return &MockOrderService_Issue_Call{Call: _e.mock.On("Issue", ctx, idsStr)}
}

func (_c *MockOrderService_Issue_Call) Run(run func(ctx context.Context, idsStr string)) *MockOrderService_Issue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrderService_Issue_Call) Return(_a0 error) *MockOrderService_Issue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderService_Issue_Call) RunAndReturn(run func(context.Context, string) error) *MockOrderService_Issue_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrders provides a mock function with given fields: ctx, userId, offsetStr, limitStr
func (_m *MockOrderService) ListOrders(ctx context.Context, userId string, offsetStr string, limitStr string) ([]models.Order, error) {
	ret := _m.Called(ctx, userId, offsetStr, limitStr)

	if len(ret) == 0 {
		panic("no return value specified for ListOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]models.Order, error)); ok {
		return rf(ctx, userId, offsetStr, limitStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []models.Order); ok {
		r0 = rf(ctx, userId, offsetStr, limitStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userId, offsetStr, limitStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderService_ListOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrders'
type MockOrderService_ListOrders_Call struct {
	*mock.Call
}

// ListOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - offsetStr string
//   - limitStr string
func (_e *MockOrderService_Expecter) ListOrders(ctx interface{}, userId interface{}, offsetStr interface{}, limitStr interface{}) *MockOrderService_ListOrders_Call {
	return &MockOrderService_ListOrders_Call{Call: _e.mock.On("ListOrders", ctx, userId, offsetStr, limitStr)}
}

func (_c *MockOrderService_ListOrders_Call) Run(run func(ctx context.Context, userId string, offsetStr string, limitStr string)) *MockOrderService_ListOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockOrderService_ListOrders_Call) Return(_a0 []models.Order, _a1 error) *MockOrderService_ListOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderService_ListOrders_Call) RunAndReturn(run func(context.Context, string, string, string) ([]models.Order, error)) *MockOrderService_ListOrders_Call {
	_c.Call.Return(run)
	return _c
}

// ListReturns provides a mock function with given fields: ctx, offsetStr, limitStr
func (_m *MockOrderService) ListReturns(ctx context.Context, offsetStr string, limitStr string) ([]models.Order, error) {
	ret := _m.Called(ctx, offsetStr, limitStr)

	if len(ret) == 0 {
		panic("no return value specified for ListReturns")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.Order, error)); ok {
		return rf(ctx, offsetStr, limitStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.Order); ok {
		r0 = rf(ctx, offsetStr, limitStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, offsetStr, limitStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderService_ListReturns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReturns'
type MockOrderService_ListReturns_Call struct {
	*mock.Call
}

// ListReturns is a helper method to define mock.On call
//   - ctx context.Context
//   - offsetStr string
//   - limitStr string
func (_e *MockOrderService_Expecter) ListReturns(ctx interface{}, offsetStr interface{}, limitStr interface{}) *MockOrderService_ListReturns_Call {
	return &MockOrderService_ListReturns_Call{Call: _e.mock.On("ListReturns", ctx, offsetStr, limitStr)}
}

func (_c *MockOrderService_ListReturns_Call) Run(run func(ctx context.Context, offsetStr string, limitStr string)) *MockOrderService_ListReturns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOrderService_ListReturns_Call) Return(_a0 []models.Order, _a1 error) *MockOrderService_ListReturns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderService_ListReturns_Call) RunAndReturn(run func(context.Context, string, string) ([]models.Order, error)) *MockOrderService_ListReturns_Call {
	_c.Call.Return(run)
	return _c
}

// PrintList provides a mock function with given fields: orders
func (_m *MockOrderService) PrintList(orders []models.Order) {
	_m.Called(orders)
}

// MockOrderService_PrintList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintList'
type MockOrderService_PrintList_Call struct {
	*mock.Call
}

// PrintList is a helper method to define mock.On call
//   - orders []models.Order
func (_e *MockOrderService_Expecter) PrintList(orders interface{}) *MockOrderService_PrintList_Call {
	return &MockOrderService_PrintList_Call{Call: _e.mock.On("PrintList", orders)}
}

func (_c *MockOrderService_PrintList_Call) Run(run func(orders []models.Order)) *MockOrderService_PrintList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.Order))
	})
	return _c
}

func (_c *MockOrderService_PrintList_Call) Return() *MockOrderService_PrintList_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOrderService_PrintList_Call) RunAndReturn(run func([]models.Order)) *MockOrderService_PrintList_Call {
	_c.Call.Return(run)
	return _c
}

// Return provides a mock function with given fields: ctx, id, userId
func (_m *MockOrderService) Return(ctx context.Context, id string, userId string) error {
	ret := _m.Called(ctx, id, userId)

	if len(ret) == 0 {
		panic("no return value specified for Return")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderService_Return_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Return'
type MockOrderService_Return_Call struct {
	*mock.Call
}

// Return is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userId string
func (_e *MockOrderService_Expecter) Return(ctx interface{}, id interface{}, userId interface{}) *MockOrderService_Return_Call {
	return &MockOrderService_Return_Call{Call: _e.mock.On("Return", ctx, id, userId)}
}

func (_c *MockOrderService_Return_Call) Run(run func(ctx context.Context, id string, userId string)) *MockOrderService_Return_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOrderService_Return_Call) Return(_a0 error) *MockOrderService_Return_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderService_Return_Call) RunAndReturn(run func(context.Context, string, string) error) *MockOrderService_Return_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnToCourier provides a mock function with given fields: ctx, id
func (_m *MockOrderService) ReturnToCourier(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ReturnToCourier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderService_ReturnToCourier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnToCourier'
type MockOrderService_ReturnToCourier_Call struct {
	*mock.Call
}

// ReturnToCourier is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockOrderService_Expecter) ReturnToCourier(ctx interface{}, id interface{}) *MockOrderService_ReturnToCourier_Call {
	return &MockOrderService_ReturnToCourier_Call{Call: _e.mock.On("ReturnToCourier", ctx, id)}
}

func (_c *MockOrderService_ReturnToCourier_Call) Run(run func(ctx context.Context, id string)) *MockOrderService_ReturnToCourier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrderService_ReturnToCourier_Call) Return(_a0 error) *MockOrderService_ReturnToCourier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderService_ReturnToCourier_Call) RunAndReturn(run func(context.Context, string) error) *MockOrderService_ReturnToCourier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
