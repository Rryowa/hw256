// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "homework/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockPackageService is an autogenerated mock type for the PackageService type
type MockPackageService struct {
	mock.Mock
}

type MockPackageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageService) EXPECT() *MockPackageService_Expecter {
	return &MockPackageService_Expecter{mock: &_m.Mock}
}

// ApplyPackage provides a mock function with given fields: order, packageType
func (_m *MockPackageService) ApplyPackage(order *models.Order, packageType models.PackageType) {
	_m.Called(order, packageType)
}

// MockPackageService_ApplyPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyPackage'
type MockPackageService_ApplyPackage_Call struct {
	*mock.Call
}

// ApplyPackage is a helper method to define mock.On call
//   - order *models.Order
//   - packageType models.PackageType
func (_e *MockPackageService_Expecter) ApplyPackage(order interface{}, packageType interface{}) *MockPackageService_ApplyPackage_Call {
	return &MockPackageService_ApplyPackage_Call{Call: _e.mock.On("ApplyPackage", order, packageType)}
}

func (_c *MockPackageService_ApplyPackage_Call) Run(run func(order *models.Order, packageType models.PackageType)) *MockPackageService_ApplyPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Order), args[1].(models.PackageType))
	})
	return _c
}

func (_c *MockPackageService_ApplyPackage_Call) Return() *MockPackageService_ApplyPackage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPackageService_ApplyPackage_Call) RunAndReturn(run func(*models.Order, models.PackageType)) *MockPackageService_ApplyPackage_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePackage provides a mock function with given fields: weight, packageType
func (_m *MockPackageService) ValidatePackage(weight models.Weight, packageType models.PackageType) error {
	ret := _m.Called(weight, packageType)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Weight, models.PackageType) error); ok {
		r0 = rf(weight, packageType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPackageService_ValidatePackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePackage'
type MockPackageService_ValidatePackage_Call struct {
	*mock.Call
}

// ValidatePackage is a helper method to define mock.On call
//   - weight models.Weight
//   - packageType models.PackageType
func (_e *MockPackageService_Expecter) ValidatePackage(weight interface{}, packageType interface{}) *MockPackageService_ValidatePackage_Call {
	return &MockPackageService_ValidatePackage_Call{Call: _e.mock.On("ValidatePackage", weight, packageType)}
}

func (_c *MockPackageService_ValidatePackage_Call) Run(run func(weight models.Weight, packageType models.PackageType)) *MockPackageService_ValidatePackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Weight), args[1].(models.PackageType))
	})
	return _c
}

func (_c *MockPackageService_ValidatePackage_Call) Return(_a0 error) *MockPackageService_ValidatePackage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPackageService_ValidatePackage_Call) RunAndReturn(run func(models.Weight, models.PackageType) error) *MockPackageService_ValidatePackage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackageService creates a new instance of MockPackageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackageService {
	mock := &MockPackageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
