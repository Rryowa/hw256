// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "homework/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockStorage) Delete(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) Delete(ctx interface{}, id interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockStorage_Delete_Call) Run(run func(ctx context.Context, id string)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return(_a0 string, _a1 error) *MockStorage_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockStorage) Get(ctx context.Context, id string) (models.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) Get(ctx interface{}, id interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockStorage_Get_Call) Run(run func(ctx context.Context, id string)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(_a0 models.Order, _a1 error) *MockStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(context.Context, string) (models.Order, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, userId, offset, limit
func (_m *MockStorage) GetOrders(ctx context.Context, userId string, offset int, limit int) ([]models.Order, error) {
	ret := _m.Called(ctx, userId, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]models.Order, error)); ok {
		return rf(ctx, userId, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []models.Order); ok {
		r0 = rf(ctx, userId, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userId, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type MockStorage_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - offset int
//   - limit int
func (_e *MockStorage_Expecter) GetOrders(ctx interface{}, userId interface{}, offset interface{}, limit interface{}) *MockStorage_GetOrders_Call {
	return &MockStorage_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, userId, offset, limit)}
}

func (_c *MockStorage_GetOrders_Call) Run(run func(ctx context.Context, userId string, offset int, limit int)) *MockStorage_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockStorage_GetOrders_Call) Return(_a0 []models.Order, _a1 error) *MockStorage_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetOrders_Call) RunAndReturn(run func(context.Context, string, int, int) ([]models.Order, error)) *MockStorage_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetReturns provides a mock function with given fields: ctx, offset, limit
func (_m *MockStorage) GetReturns(ctx context.Context, offset int, limit int) ([]models.Order, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetReturns")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]models.Order, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []models.Order); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetReturns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReturns'
type MockStorage_GetReturns_Call struct {
	*mock.Call
}

// GetReturns is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *MockStorage_Expecter) GetReturns(ctx interface{}, offset interface{}, limit interface{}) *MockStorage_GetReturns_Call {
	return &MockStorage_GetReturns_Call{Call: _e.mock.On("GetReturns", ctx, offset, limit)}
}

func (_c *MockStorage_GetReturns_Call) Run(run func(ctx context.Context, offset int, limit int)) *MockStorage_GetReturns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockStorage_GetReturns_Call) Return(_a0 []models.Order, _a1 error) *MockStorage_GetReturns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetReturns_Call) RunAndReturn(run func(context.Context, int, int) ([]models.Order, error)) *MockStorage_GetReturns_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, order
func (_m *MockStorage) Insert(ctx context.Context, order models.Order) (string, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) (string, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) string); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockStorage_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - order models.Order
func (_e *MockStorage_Expecter) Insert(ctx interface{}, order interface{}) *MockStorage_Insert_Call {
	return &MockStorage_Insert_Call{Call: _e.mock.On("Insert", ctx, order)}
}

func (_c *MockStorage_Insert_Call) Run(run func(ctx context.Context, order models.Order)) *MockStorage_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *MockStorage_Insert_Call) Return(_a0 string, _a1 error) *MockStorage_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Insert_Call) RunAndReturn(run func(context.Context, models.Order) (string, error)) *MockStorage_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// IssueUpdate provides a mock function with given fields: ctx, orders
func (_m *MockStorage) IssueUpdate(ctx context.Context, orders []models.Order) ([]bool, error) {
	ret := _m.Called(ctx, orders)

	if len(ret) == 0 {
		panic("no return value specified for IssueUpdate")
	}

	var r0 []bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Order) ([]bool, error)); ok {
		return rf(ctx, orders)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Order) []bool); ok {
		r0 = rf(ctx, orders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Order) error); ok {
		r1 = rf(ctx, orders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_IssueUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueUpdate'
type MockStorage_IssueUpdate_Call struct {
	*mock.Call
}

// IssueUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - orders []models.Order
func (_e *MockStorage_Expecter) IssueUpdate(ctx interface{}, orders interface{}) *MockStorage_IssueUpdate_Call {
	return &MockStorage_IssueUpdate_Call{Call: _e.mock.On("IssueUpdate", ctx, orders)}
}

func (_c *MockStorage_IssueUpdate_Call) Run(run func(ctx context.Context, orders []models.Order)) *MockStorage_IssueUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Order))
	})
	return _c
}

func (_c *MockStorage_IssueUpdate_Call) Return(_a0 []bool, _a1 error) *MockStorage_IssueUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_IssueUpdate_Call) RunAndReturn(run func(context.Context, []models.Order) ([]bool, error)) *MockStorage_IssueUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Truncate provides a mock function with given fields: ctx, table
func (_m *MockStorage) Truncate(ctx context.Context, table string) error {
	ret := _m.Called(ctx, table)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Truncate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Truncate'
type MockStorage_Truncate_Call struct {
	*mock.Call
}

// Truncate is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
func (_e *MockStorage_Expecter) Truncate(ctx interface{}, table interface{}) *MockStorage_Truncate_Call {
	return &MockStorage_Truncate_Call{Call: _e.mock.On("Truncate", ctx, table)}
}

func (_c *MockStorage_Truncate_Call) Run(run func(ctx context.Context, table string)) *MockStorage_Truncate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Truncate_Call) Return(_a0 error) *MockStorage_Truncate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Truncate_Call) RunAndReturn(run func(context.Context, string) error) *MockStorage_Truncate_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, order
func (_m *MockStorage) Update(ctx context.Context, order models.Order) (bool, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) (bool, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) bool); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - order models.Order
func (_e *MockStorage_Expecter) Update(ctx interface{}, order interface{}) *MockStorage_Update_Call {
	return &MockStorage_Update_Call{Call: _e.mock.On("Update", ctx, order)}
}

func (_c *MockStorage_Update_Call) Run(run func(ctx context.Context, order models.Order)) *MockStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *MockStorage_Update_Call) Return(_a0 bool, _a1 error) *MockStorage_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Update_Call) RunAndReturn(run func(context.Context, models.Order) (bool, error)) *MockStorage_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
